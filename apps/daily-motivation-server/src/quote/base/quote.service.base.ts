/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Quote as PrismaQuote } from "@prisma/client";

export class QuoteServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.QuoteCountArgs, "select">): Promise<number> {
    return this.prisma.quote.count(args);
  }

  async quotes<T extends Prisma.QuoteFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.QuoteFindManyArgs>
  ): Promise<PrismaQuote[]> {
    return this.prisma.quote.findMany<Prisma.QuoteFindManyArgs>(args);
  }
  async quote<T extends Prisma.QuoteFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.QuoteFindUniqueArgs>
  ): Promise<PrismaQuote | null> {
    return this.prisma.quote.findUnique(args);
  }
  async createQuote<T extends Prisma.QuoteCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.QuoteCreateArgs>
  ): Promise<PrismaQuote> {
    return this.prisma.quote.create<T>(args);
  }
  async updateQuote<T extends Prisma.QuoteUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.QuoteUpdateArgs>
  ): Promise<PrismaQuote> {
    return this.prisma.quote.update<T>(args);
  }
  async deleteQuote<T extends Prisma.QuoteDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.QuoteDeleteArgs>
  ): Promise<PrismaQuote> {
    return this.prisma.quote.delete(args);
  }
}
